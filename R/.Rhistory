    temp <- BasisExpand(X, "Bsp", c(8, 4), 0)
    coef.arr <- temp$coef.arr
    Phi <- temp$Phi
    H.mat <- temp$H.mat
    temp2 <- eigen(H.mat, symmetric=TRUE)
    H.half <- temp2$vectors %*% sqrt(diag(temp2$values)) %*% t(temp2$vectors)
    G.H <- NULL
    for (n.var in 1:N.var)
      G.H <- cbind(G.H, coef.arr[,, n.var] %*% H.half)

    ret.eigen <- eigen(t(G.H) %*% G.H, symmetric=TRUE)

ret.eigen$values
val
test.data <- function (N.sub, N.seed, N.rep=10)
{
  ret.values <- matrix(0, N.rep, 10) ##固有値
  ret.values.prop <- matrix(0, N.rep, 10) ##最小固有値に対する相対的な大きさ
  ret.vectors <- array(0, dim=c(10, 2, N.rep)) ##固有ベクトルV
  ret.relation <- array(0, dim=c(10, 2, N.rep)) ##真値Aと固有ベクトルVとの関連係数B
  for (n.rep in 1:N.rep) {
    set.seed(N.seed * n.rep)
    N <- N.sub
    RankIsFull <- TRUE; PO <- 0.10; PE <- 0; NN <- 0; N.sim <- 50; N.seed <- 10
    dat <- SimDataRevision(RankIsFull, PO, N, PE, NN)
    X <- dat$X; A.t <- dat$A; V <- dat$V; U.t <- dat$U; cluster.t <- dat$cluster; F.t <- dat$F
    N.sub <- dim(X)[1]; N.var <- dim(X)[3]; N.time <- dim(X)[2]; N.clust <- 4; N.comp <- 2; N.basis <- 10

    ##基底関数展開
    temp <- BasisExpand(X, "Bsp", c(8, 4), 0)
    coef.arr <- temp$coef.arr
    Phi <- temp$Phi
    H.mat <- temp$H.mat
    temp2 <- eigen(H.mat, symmetric=TRUE)
    H.half <- temp2$vectors %*% sqrt(diag(temp2$values)) %*% t(temp2$vectors)
    G.H <- NULL
    for (n.var in 1:N.var)
      G.H <- cbind(G.H, coef.arr[,, n.var] %*% H.half)

    ret.eigen <- eigen(t(G.H) %*% G.H, symmetric=TRUE)
    val <- ret.eigen$values
    vec <- ret.eigen$vectors
    val.prop <- ret.eigen$values / ret.eigen$values[10]
    B.true <- t(vec) %*% A.t; class(B.true) <- "loadings"

    ret.values[n.rep, ] <- val
    ret.values.prop[n.rep, ] <- val.prop
    ret.vectors[,, n.rep] <- vec
    ret.relation[,, n.rep] <- B.true
  }

  return(list("val"=ret.values, "vec"=ret.vectors, "prop"=ret.values.prop, "relation"=ret.relation))
}

test.data <- function (N.sub, N.seed, N.rep=10)
{
  ret.values <- matrix(0, N.rep, 10) ##固有値
  ret.values.prop <- matrix(0, N.rep, 10) ##最小固有値に対する相対的な大きさ
  ret.vectors <- array(0, dim=c(10, 2, N.rep)) ##固有ベクトルV
  ret.relation <- array(0, dim=c(10, 2, N.rep)) ##真値Aと固有ベクトルVとの関連係数B
  for (n.rep in 1:N.rep) {
    set.seed(N.seed * n.rep)
    N <- N.sub
    RankIsFull <- TRUE; PO <- 0.10; PE <- 0; NN <- 0; N.sim <- 50; N.seed <- 10
    dat <- SimDataRevision(RankIsFull, PO, N, PE, NN)
    X <- dat$X; A.t <- dat$A; V <- dat$V; U.t <- dat$U; cluster.t <- dat$cluster; F.t <- dat$F
    N.sub <- dim(X)[1]; N.var <- dim(X)[3]; N.time <- dim(X)[2]; N.clust <- 4; N.comp <- 2; N.basis <- 10

    ##基底関数展開
    temp <- BasisExpand(X, "Bsp", c(8, 4), 0)
    coef.arr <- temp$coef.arr
    Phi <- temp$Phi
    H.mat <- temp$H.mat
    temp2 <- eigen(H.mat, symmetric=TRUE)
    H.half <- temp2$vectors %*% sqrt(diag(temp2$values)) %*% t(temp2$vectors)
    G.H <- NULL
    for (n.var in 1:N.var)
      G.H <- cbind(G.H, coef.arr[,, n.var] %*% H.half)

    ret.eigen <- eigen(t(G.H) %*% G.H, symmetric=TRUE)
    val <- ret.eigen$values
    vec <- ret.eigen$vectors
    val.prop <- ret.eigen$values / ret.eigen$values[10]
    B.true <- t(vec) %*% A.t; class(B.true) <- "loadings"

    ret.values[n.rep, ] <- val
    ret.values.prop[n.rep, ] <- val.prop
    ret.vectors[,, n.rep] <- vec
    ret.relation[,, n.rep] <- B.true
  }

  return(list("val"=ret.values, "vec"=ret.vectors, "prop"=ret.values.prop, "relation"=ret.relation))
}

temp <- test.data (100, 1, 10)

  ret.values <- matrix(0, N.rep, 10) ##固有値
  ret.values.prop <- matrix(0, N.rep, 10) ##最小固有値に対する相対的な大きさ
  ret.vectors <- array(0, dim=c(10, 2, N.rep)) ##固有ベクトルV
  ret.relation <- array(0, dim=c(10, 2, N.rep)) ##真値Aと固有ベクトルVとの関連係数B

    set.seed(N.seed * n.rep)
    N <- N.sub
    RankIsFull <- TRUE; PO <- 0.10; PE <- 0; NN <- 0; N.sim <- 50; N.seed <- 10
    dat <- SimDataRevision(RankIsFull, PO, N, PE, NN)
    X <- dat$X; A.t <- dat$A; V <- dat$V; U.t <- dat$U; cluster.t <- dat$cluster; F.t <- dat$F
    N.sub <- dim(X)[1]; N.var <- dim(X)[3]; N.time <- dim(X)[2]; N.clust <- 4; N.comp <- 2; N.basis <- 10

    ##基底関数展開
    temp <- BasisExpand(X, "Bsp", c(8, 4), 0)
    coef.arr <- temp$coef.arr
    Phi <- temp$Phi
    H.mat <- temp$H.mat
    temp2 <- eigen(H.mat, symmetric=TRUE)
    H.half <- temp2$vectors %*% sqrt(diag(temp2$values)) %*% t(temp2$vectors)
    G.H <- NULL
    for (n.var in 1:N.var)
      G.H <- cbind(G.H, coef.arr[,, n.var] %*% H.half)

    ret.eigen <- eigen(t(G.H) %*% G.H, symmetric=TRUE)
    val <- ret.eigen$values
    vec <- ret.eigen$vectors
    val.prop <- ret.eigen$values / ret.eigen$values[10]
    B.true <- t(vec) %*% A.t; class(B.true) <- "loadings"

    ret.values[n.rep, ] <- val
    ret.values.prop[n.rep, ] <- val.prop
    ret.vectors[,, n.rep] <- vec
    ret.relation[,, n.rep] <- B.true

str(vec)
test.data <- function (N.sub, N.seed, N.rep=10)
{
  ret.values <- matrix(0, N.rep, 10) ##固有値
  ret.values.prop <- matrix(0, N.rep, 10) ##最小固有値に対する相対的な大きさ
  ret.vectors <- array(0, dim=c(10, 10, N.rep)) ##固有ベクトルV
  ret.relation <- array(0, dim=c(10, 2, N.rep)) ##真値Aと固有ベクトルVとの関連係数B
  for (n.rep in 1:N.rep) {
    set.seed(N.seed * n.rep)
    N <- N.sub
    RankIsFull <- TRUE; PO <- 0.10; PE <- 0; NN <- 0; N.sim <- 50; N.seed <- 10
    dat <- SimDataRevision(RankIsFull, PO, N, PE, NN)
    X <- dat$X; A.t <- dat$A; V <- dat$V; U.t <- dat$U; cluster.t <- dat$cluster; F.t <- dat$F
    N.sub <- dim(X)[1]; N.var <- dim(X)[3]; N.time <- dim(X)[2]; N.clust <- 4; N.comp <- 2; N.basis <- 10

    ##基底関数展開
    temp <- BasisExpand(X, "Bsp", c(8, 4), 0)
    coef.arr <- temp$coef.arr
    Phi <- temp$Phi
    H.mat <- temp$H.mat
    temp2 <- eigen(H.mat, symmetric=TRUE)
    H.half <- temp2$vectors %*% sqrt(diag(temp2$values)) %*% t(temp2$vectors)
    G.H <- NULL
    for (n.var in 1:N.var)
      G.H <- cbind(G.H, coef.arr[,, n.var] %*% H.half)

    ret.eigen <- eigen(t(G.H) %*% G.H, symmetric=TRUE)
    val <- ret.eigen$values
    vec <- ret.eigen$vectors
    val.prop <- ret.eigen$values / ret.eigen$values[10]
    B.true <- t(vec) %*% A.t; class(B.true) <- "loadings"

    ret.values[n.rep, ] <- val
    ret.values.prop[n.rep, ] <- val.prop
    ret.vectors[,, n.rep] <- vec
    ret.relation[,, n.rep] <- B.true
  }

  return(list("val"=ret.values, "vec"=ret.vectors, "prop"=ret.values.prop, "relation"=ret.relation))
}

temp <- test.data (100, 1, 10)

str(temp)
temp$val
temp$prop
summary(temp$prop)
temp1 <- test.data (100, 1, 100)
temp2 <- test.data (300, 2, 100)
temp3 <- test.data (500, 3, 100)

str(temp1)
str(temp2)
str(temp3)
summary(temp1$prop)
hoge <- summary(temp1$prop)
str(hoge)
summary(temp1$prop)[3,]
is.vector(summary(temp1$prop)[3,])
as.vector(summary(temp1$prop)[3,])
as.matrix(summary(temp1$prop)[3,])
as.matrix(summary(temp1$prop))
is.numeric(as.matrix(summary(temp1$prop)))
is.character(as.matrix(summary(temp1$prop)))
median(temp3$prop[,1])
str(temp3$prop)
apply(temp3$prop, 2, median)
apply(temp2$prop, 2, median)
apply(temp1$prop, 2, median)
temp4 <- test.data (1000, 3, 100)

apply(temp4$prop, 2, median)

apply(temp1$prop, 2, median)
apply(temp2$prop, 2, median)
apply(temp3$prop, 2, median)
apply(temp4$prop, 2, median)

temp5 <- test.data (10000, 3, 100)

apply(temp5$prop, 2, median)

print(apply(temp1$prop, 2, median))
print(apply(temp1$prop, 2, median), digits=2)
print(apply(temp1$prop, 2, median), digits=3)
print(apply(temp1$prop, 2, median), digits=3)
print(apply(temp2$prop, 2, median), digits=3)
print(apply(temp3$prop, 2, median), digits=3)
print(apply(temp4$prop, 2, median), digits=3)
print(apply(temp5$prop, 2, median), digits=3)

arg1.vec <- arg2.vec <- arg3.vec <- arg4.vec <- arg5.vec <- arg6.vec <- NULL
ffkm <- ffkmts <- fpck <- tandem <- NULL
ARI <- NULL
N.rep <- 50
for (arg1 in c(FALSE)) {
  for (arg2 in c(0.0001)) { ##PO
    for (arg3 in c(100, 300, 500)) { ##Sample Sise
      for (arg4 in c(0)) { ##PE
        for (arg5 in c(0, 1, 2)) { ##NN
          for (arg6 in c("FFKM", "FFKMts", "FPCK", "TA")) {
            for (n.rep in 1:N.rep) {
              arg1.vec <- c(arg1.vec, arg1)
              arg2.vec <- c(arg2.vec, arg2)
              arg3.vec <- c(arg3.vec, arg3)
              arg4.vec <- c(arg4.vec, arg4)
              arg5.vec <- c(arg5.vec, arg5)
              arg6.vec <- c(arg6.vec, arg6)
            }
          }
          save.location <- paste("/home/michio/02_work/19_RKM_FKM/working_directory/130922_simulation_revision/out/RankIsFull=", arg1, "_PO=", arg2, "_N=", arg3, "_PE=", arg4, "_NN=", arg5, sep="")
          load(paste(save.location, "_rand.ret", sep=""))
          ARI <- c(ARI, c(t(rand.ret)))
        }
      }
    }
  }
}
ret.all <- data.frame(RankIsFull=factor(arg1.vec), PO=factor(arg2.vec), SS=factor(arg3.vec),
                      PE=factor(arg4.vec), NN=factor(arg5.vec), Method=factor(arg6.vec),
                      ARI=ARI)

for (arg1 in c(FALSE)) {
  for (arg2 in c(0.0001)) { ##PO
    if (arg1) {
      arg1.dummy <- 1
    } else {
      arg1.dummy <- 2
    }
    x11() # on a Unix-alike
    par(mfrow=c(3,1))
    boxplot(ARI ~ SS * Method, data=subset(ret.all, RankIsFull==arg1 & PO==arg2), subset=c(NN==0), main=paste("Type=", arg1.dummy, ", PO=", arg2, ", and NN=0", sep=""), ylim=c(0,1), ylab="Adjusted Rand Index")
    boxplot(ARI ~ SS * Method, data=subset(ret.all, RankIsFull==arg1 & PO==arg2), subset=c(NN==1), main=paste("Type=", arg1.dummy, ", PO=", arg2, ", and NN=1", sep=""), ylim=c(0,1), ylab="Adjusted Rand Index")
    boxplot(ARI ~ SS * Method, data=subset(ret.all, RankIsFull==arg1 & PO==arg2), subset=c(NN==2), main=paste("Type=", arg1.dummy, ", PO=", arg2, ", and NN=2", sep=""), ylim=c(0,1), ylab="Adjusted Rand Index")
    par(mfrow=c(1,1))
    dev.copy2eps(file=paste("/home/michio/02_work/19_RKM_FKM/working_directory/130922_simulation_revision/out/ARI_RankIsFull=", arg1, "_PO=", arg2, ".eps", sep=""), width=10, height=8)
    dev.off()
  }
}

library(fanc)
library(RGtk2)
library(cairoDevice)
library(matlab)

library()
library()
library(fanc)
library(RGtk2)
library(cairoDevice)
library(matlab)

set.seed(0)
loadings0 <- matrix(c(rep(0.8,5),rep(0,5),rep(0,5),rep(0.8,5)),10,2)
common.factors0 <- matrix(rnorm(50*2),50,2)
unique.factors0 <- matrix(rnorm(50*10,sd=sqrt(0.36)),50,10)
x <- common.factors0 %*% t(loadings0) + unique.factors0

fit <- fanc(x,2)

loadings <- fit$loadings[[5]][[20]]
loadings <- as.matrix(loadings)
loadings  <- t(loadings)
loadings <- fliplr(loadings)

str(fit)
n.col <- 256
col.red <- rgb(red=1, green = (0:n.col)/n.col, blue = (0:n.col)/n.col, names = paste("red", 0:n.col, sep = "."))
col.black <- rgb(red=(0:n.col)/n.col, green = (0:n.col)/n.col, blue = (0:n.col)/n.col, names = paste("black", 0:n.col, sep = "."))
col.all <- c(col.red,rev(col.black))
max.col <- max(abs(loadings))

 win = gtkWindow()
 da = gtkDrawingArea()
 win$add(da)
 asCairoDevice(da)
image(loadings,col=col.all,zlim=c(-max.col,max.col))

packageVersion("fanc")
loadings
arg1.vec <- arg2.vec <- arg3.vec <- arg4.vec <- arg5.vec <- arg6.vec <- NULL
ffkm <- ffkmts <- fpck <- tandem <- NULL
ARI <- NULL
N.rep <- 50
for (arg1 in c(FALSE)) {
  for (arg2 in c(0.0001, 0.05)) { ##PO
    for (arg3 in c(100, 300, 500)) { ##Sample Sise
      for (arg4 in c(0)) { ##PE
        for (arg5 in c(0, 1, 2)) { ##NN
          for (arg6 in c("FFKM", "FFKMts", "FPCK", "TA")) {
            for (n.rep in 1:N.rep) {
              arg1.vec <- c(arg1.vec, arg1)
              arg2.vec <- c(arg2.vec, arg2)
              arg3.vec <- c(arg3.vec, arg3)
              arg4.vec <- c(arg4.vec, arg4)
              arg5.vec <- c(arg5.vec, arg5)
              arg6.vec <- c(arg6.vec, arg6)
            }
          }
          save.location <- paste("/home/michio/02_work/19_RKM_FKM/working_directory/130922_simulation_revision/out/RankIsFull=", arg1, "_PO=", arg2, "_N=", arg3, "_PE=", arg4, "_NN=", arg5, sep="")
          load(paste(save.location, "_rand.ret", sep=""))
          ARI <- c(ARI, c(t(rand.ret)))
        }
      }
    }
  }
}
ret.all <- data.frame(RankIsFull=factor(arg1.vec), PO=factor(arg2.vec), SS=factor(arg3.vec),
                      PE=factor(arg4.vec), NN=factor(arg5.vec), Method=factor(arg6.vec),
                      ARI=ARI)

for (arg1 in c(FALSE)) {
  for (arg2 in c(0.0001, 0.05)) { ##PO
    if (arg1) {
      arg1.dummy <- 1
    } else {
      arg1.dummy <- 2
    }
    x11() # on a Unix-alike
    par(mfrow=c(3,1))
    boxplot(ARI ~ SS * Method, data=subset(ret.all, RankIsFull==arg1 & PO==arg2), subset=c(NN==0), main=paste("Type=", arg1.dummy, ", PO=", arg2, ", and NN=0", sep=""), ylim=c(0,1), ylab="Adjusted Rand Index")
    boxplot(ARI ~ SS * Method, data=subset(ret.all, RankIsFull==arg1 & PO==arg2), subset=c(NN==1), main=paste("Type=", arg1.dummy, ", PO=", arg2, ", and NN=1", sep=""), ylim=c(0,1), ylab="Adjusted Rand Index")
    boxplot(ARI ~ SS * Method, data=subset(ret.all, RankIsFull==arg1 & PO==arg2), subset=c(NN==2), main=paste("Type=", arg1.dummy, ", PO=", arg2, ", and NN=2", sep=""), ylim=c(0,1), ylab="Adjusted Rand Index")
    par(mfrow=c(1,1))
    dev.copy2eps(file=paste("/home/michio/02_work/19_RKM_FKM/working_directory/130922_simulation_revision/out/ARI_RankIsFull=", arg1, "_PO=", arg2, ".eps", sep=""), width=10, height=8)
    dev.off()
  }
}

arg1.vec <- arg2.vec <- arg3.vec <- arg4.vec <- arg5.vec <- arg6.vec <- NULL
ffkm <- ffkmts <- fpck <- tandem <- NULL
ARI <- NULL
N.rep <- 50
for (arg1 in c(FALSE)) {
  for (arg2 in c(0.0001, 0.05, 0.10)) { ##PO
    for (arg3 in c(100, 300, 500)) { ##Sample Sise
      for (arg4 in c(0)) { ##PE
        for (arg5 in c(0, 1, 2)) { ##NN
          for (arg6 in c("FFKM", "FFKMts", "FPCK", "TA")) {
            for (n.rep in 1:N.rep) {
              arg1.vec <- c(arg1.vec, arg1)
              arg2.vec <- c(arg2.vec, arg2)
              arg3.vec <- c(arg3.vec, arg3)
              arg4.vec <- c(arg4.vec, arg4)
              arg5.vec <- c(arg5.vec, arg5)
              arg6.vec <- c(arg6.vec, arg6)
            }
          }
          save.location <- paste("/home/michio/02_work/19_RKM_FKM/working_directory/130922_simulation_revision/out/RankIsFull=", arg1, "_PO=", arg2, "_N=", arg3, "_PE=", arg4, "_NN=", arg5, sep="")
          load(paste(save.location, "_rand.ret", sep=""))
          ARI <- c(ARI, c(t(rand.ret)))
        }
      }
    }
  }
}
ret.all <- data.frame(RankIsFull=factor(arg1.vec), PO=factor(arg2.vec), SS=factor(arg3.vec),
                      PE=factor(arg4.vec), NN=factor(arg5.vec), Method=factor(arg6.vec),
                      ARI=ARI)

for (arg1 in c(FALSE)) {
  for (arg2 in c(0.0001, 0.05, 0.10)) { ##PO
    if (arg1) {
      arg1.dummy <- 1
    } else {
      arg1.dummy <- 2
    }
    x11() # on a Unix-alike
    par(mfrow=c(3,1))
    boxplot(ARI ~ SS * Method, data=subset(ret.all, RankIsFull==arg1 & PO==arg2), subset=c(NN==0), main=paste("Type=", arg1.dummy, ", PO=", arg2, ", and NN=0", sep=""), ylim=c(0,1), ylab="Adjusted Rand Index")
    boxplot(ARI ~ SS * Method, data=subset(ret.all, RankIsFull==arg1 & PO==arg2), subset=c(NN==1), main=paste("Type=", arg1.dummy, ", PO=", arg2, ", and NN=1", sep=""), ylim=c(0,1), ylab="Adjusted Rand Index")
    boxplot(ARI ~ SS * Method, data=subset(ret.all, RankIsFull==arg1 & PO==arg2), subset=c(NN==2), main=paste("Type=", arg1.dummy, ", PO=", arg2, ", and NN=2", sep=""), ylim=c(0,1), ylab="Adjusted Rand Index")
    par(mfrow=c(1,1))
    dev.copy2eps(file=paste("/home/michio/02_work/19_RKM_FKM/working_directory/130922_simulation_revision/out/ARI_RankIsFull=", arg1, "_PO=", arg2, ".eps", sep=""), width=10, height=8)
    dev.off()
  }
}


arg1.vec <- arg2.vec <- arg3.vec <- arg4.vec <- arg5.vec <- arg6.vec <- NULL
ffkm <- ffkmts <- fpck <- tandem <- NULL
ARI <- NULL
N.rep <- 50
for (arg1 in c(FALSE)) {
  for (arg2 in c(0.0001, 0.05, 0.10, 0.15)) { ##PO
    for (arg3 in c(100, 300, 500)) { ##Sample Sise
      for (arg4 in c(0)) { ##PE
        for (arg5 in c(0, 1, 2)) { ##NN
          for (arg6 in c("FFKM", "FFKMts", "FPCK", "TA")) {
            for (n.rep in 1:N.rep) {
              arg1.vec <- c(arg1.vec, arg1)
              arg2.vec <- c(arg2.vec, arg2)
              arg3.vec <- c(arg3.vec, arg3)
              arg4.vec <- c(arg4.vec, arg4)
              arg5.vec <- c(arg5.vec, arg5)
              arg6.vec <- c(arg6.vec, arg6)
            }
          }
          save.location <- paste("/home/michio/02_work/19_RKM_FKM/working_directory/130922_simulation_revision/out/RankIsFull=", arg1, "_PO=", arg2, "_N=", arg3, "_PE=", arg4, "_NN=", arg5, sep="")
          load(paste(save.location, "_rand.ret", sep=""))
          ARI <- c(ARI, c(t(rand.ret)))
        }
      }
    }
  }
}
ret.all <- data.frame(RankIsFull=factor(arg1.vec), PO=factor(arg2.vec), SS=factor(arg3.vec),
                      PE=factor(arg4.vec), NN=factor(arg5.vec), Method=factor(arg6.vec),
                      ARI=ARI)

for (arg1 in c(FALSE)) {
  for (arg2 in c(0.0001, 0.05, 0.10, 0.15)) { ##PO
    if (arg1) {
      arg1.dummy <- 1
    } else {
      arg1.dummy <- 2
    }
    x11() # on a Unix-alike
    par(mfrow=c(3,1))
    boxplot(ARI ~ SS * Method, data=subset(ret.all, RankIsFull==arg1 & PO==arg2), subset=c(NN==0), main=paste("Type=", arg1.dummy, ", PO=", arg2, ", and NN=0", sep=""), ylim=c(0,1), ylab="Adjusted Rand Index")
    boxplot(ARI ~ SS * Method, data=subset(ret.all, RankIsFull==arg1 & PO==arg2), subset=c(NN==1), main=paste("Type=", arg1.dummy, ", PO=", arg2, ", and NN=1", sep=""), ylim=c(0,1), ylab="Adjusted Rand Index")
    boxplot(ARI ~ SS * Method, data=subset(ret.all, RankIsFull==arg1 & PO==arg2), subset=c(NN==2), main=paste("Type=", arg1.dummy, ", PO=", arg2, ", and NN=2", sep=""), ylim=c(0,1), ylab="Adjusted Rand Index")
    par(mfrow=c(1,1))
    dev.copy2eps(file=paste("/home/michio/02_work/19_RKM_FKM/working_directory/130922_simulation_revision/out/ARI_RankIsFull=", arg1, "_PO=", arg2, ".eps", sep=""), width=10, height=8)
    dev.off()
  }
}

n
rm(list=ls(all=TRUE))
.help.ESS <- help
setwd("/home/michio/02_work/19_RKM_FKM/prog")


library(fgrc)
library(robustbase) ##Hubert & Vandervieren (2008) のadjusted boxplotの作成
source("../working_directory/131114_simulation_revision_add/func/SimDataRevision.R")
source("../working_directory/131114_simulation_revision_add/func/sim.R")
source("Plot.R")
source("to_csv.R")
source("LeastSquares.R")


RankIsFull <- TRUE; RankIsFull2 <- TRUE; PO <- 0.0001; N <- 100; NN <- 0; N.sim <- 50; N.seed <- 10; mc.cores <- 7
  N.sub <- N
  N.var <- 1 + NN
  N.time <- 100
  N.clust <- 4 ##クラスター数
  N.comp <- 2 ##次元数
  N.basis <- 10

  ##結果保存用の変数
  ret.ffkm <- ret.ffkmts <- ret.fpck <- ret.ta <- NULL ##各方法による全ての推定結果
  V.ffkm <-   array(0, dim=c(N.time, N.comp, N.var, N.sim)) ##FFKMによって推定された重み関数
  V.ffkmts <- array(0, dim=c(N.time, N.comp, N.var, N.sim)) ##FFKMtsによって推定された重み関数
  V.fpck <-   array(0, dim=c(N.time, N.comp, N.var, N.sim)) ##FPCKによって推定された重み関数
  V.ta <-     array(0, dim=c(N.time, N.comp, N.var, N.sim)) ##Tandem Analysisによって推定された重み関数
  rand.ret <- matrix(0, 4, N.sim) ##各方法によるARI
  A.t.list <- NULL ##真のAを格納する変数（後でRMSEの計算に利用する）

    ##データ作成
    dat <- SimDataRevision(RankIsFull, RankIsFull2, PO, N, NN)
    X <- dat$X; A.t <- dat$A; V <- dat$V; U.t <- dat$U; cluster.t <- dat$cluster

    ret3 <- FPCK(X, 2, 4, 100, TRUE, 100, "Bsp", c(8, 4), 0, 100, 1e-05, 1)
    ret3 <- FPCK(X, 2, 4, 100, TRUE, 100, "Bsp", c(8, 4), 0, 100, 1e-05, 2)
    ret3 <- FPCK(X, 2, 4, 100, TRUE, 100, "Bsp", c(8, 4), 0, 100, 1e-05, 3)
    ret3 <- FPCK(X, 2, 4, 100, TRUE, 100, "Bsp", c(8, 4), 0, 100, 1e-05, 4)
    ret3 <- FPCK(X, 2, 4, 300, TRUE, 100, "Bsp", c(8, 4), 0, 100, 1e-05, 1)
n
